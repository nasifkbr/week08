name: CD - Deploy Frontend to AKS

on:
  workflow_dispatch:
    inputs:
      product_api_ip:
        description: External IP of Product Service
        required: true
        default: 'http://4.237.194.135:8000'
      order_api_ip:
        description: External IP of Order Service (e.g., http://Y.Y.Y.Y:8001)
        required: true
        default: 'http://4.200.121.202:8001'
      aks_cluster_name:
        description: Name of the AKS Cluster to deploy to
        required: true
        default: 'sit722week08aks'
      aks_resource_group:
        description: Resource Group of the AKS Cluster
        required: true
        default: 'sit722week08'

jobs:
  deploy_frontend:
    runs-on: ubuntu-latest
    environment: Production

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Azure Login
        uses: azure/login@v2
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Validate ACR_NAME secret is present
        run: |
          test -n "${{ secrets.ACR_NAME }}" || (echo "ACR_NAME secret is missing"; exit 1)

      # Avoid ARM read; just compose the login server and persist it
      - name: Set ACR_LOGIN_SERVER env
        run: |
          echo "ACR_LOGIN_SERVER=${{ secrets.ACR_NAME }}.azurecr.io" >> "$GITHUB_ENV"

      - name: Verify ACR_LOGIN_SERVER is set
        run: |
          echo "ACR_LOGIN_SERVER=$ACR_LOGIN_SERVER"
          test -n "$ACR_LOGIN_SERVER" || (echo "ACR_LOGIN_SERVER is empty"; exit 1)

      - name: Login to Azure Container Registry
        run: az acr login --name "${{ secrets.ACR_NAME }}"

      - name: Inject Backend IPs into Frontend main.js (no-op if already set)
        run: |
          sed -i "s|_PRODUCT_API_URL_|${{ inputs.product_api_ip }}|g" frontend/main.js || true
          sed -i "s|_ORDER_API_URL_|${{ inputs.order_api_ip }}|g"   frontend/main.js || true
          head -n 12 frontend/main.js

      - name: Build and Push Frontend Image
        run: |
          docker build -t "$ACR_LOGIN_SERVER/frontend:latest" ./frontend
          docker push  "$ACR_LOGIN_SERVER/frontend:latest"

      # Use --admin if your SP has the Cluster Admin role (recommended for CI)
      - name: Set Kubernetes context (get AKS credentials)
        run: |
          az aks get-credentials \
            --resource-group "${{ inputs.aks_resource_group }}" \
            --name "${{ inputs.aks_cluster_name }}" \
            --admin \
            --overwrite-existing

      - name: Deploy Frontend to AKS
        run: |
          echo "Deploying frontend to AKS cluster: ${{ inputs.aks_cluster_name }}"
          cd k8s
          kubectl apply -f frontend.yaml
          kubectl get svc

      - name: Logout from Azure
        if: always()
        run: az logout || true
