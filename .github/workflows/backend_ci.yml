name: Backend CI - Test, Build and Push Images to ACR
 
on:
  workflow_dispatch:
  push:
    branches: [ main ]
    paths:
      - 'backend/**'
      - '.github/workflows/backend_ci.yml'
 
env:
  IMAGE_TAG: ${{ github.sha }}-${{ github.run_id }}
 
jobs:
  test_and_lint_backends:
    runs-on: ubuntu-latest
 
    services:
      product_db:
        image: postgres:15
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: products
        options: >-
          --health-cmd "pg_isready -U postgres"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports: [ "5432:5432" ]
 
      order_db:
        image: postgres:15
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: orders
        options: >-
          --health-cmd "pg_isready -U postgres"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports: [ "5433:5432" ]
 
    steps:
      - name: Checkout
        uses: actions/checkout@v4
 
      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.10'
 
      - name: Install deps
        run: |
          pip install --upgrade pip
          for req in backend/*/requirements.txt; do
            echo "Installing $req"
            pip install -r "$req"
          done
          pip install pytest httpx
 
      - name: Test product_service
        working-directory: backend/product_service
        env:
          POSTGRES_HOST: localhost
          POSTGRES_PORT: 5432
          POSTGRES_DB: products
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
        run: pytest -q
 
      - name: Test order_service
        working-directory: backend/order_service
        env:
          POSTGRES_HOST: localhost
          POSTGRES_PORT: 5433
          POSTGRES_DB: orders
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
        run: pytest -q
 
  build_and_push_images:
    runs-on: ubuntu-latest
    needs: test_and_lint_backends
 
    steps:
      - name: Checkout
        uses: actions/checkout@v4
 
      - name: Azure Login
        uses: azure/login@v2
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}
 
      - name: Validate ACR_NAME secret is present
        run: |
          test -n "${{ secrets.ACR_NAME }}" || (echo "ACR_NAME secret is missing"; exit 1)
 
      - name: Resolve ACR login server
        run: |
          echo "ACR_LOGIN_SERVER=$(az acr show -n ${{ secrets.ACR_NAME }} --query loginServer -o tsv)" >> $GITHUB_ENV
          echo "Resolved: $ACR_LOGIN_SERVER"
 
      - name: Login to ACR
        run: az acr login --name ${{ secrets.ACR_NAME }}
 
      - name: Build & push Product Service
        run: |
          docker build -t $ACR_LOGIN_SERVER/product_service:${{ env.IMAGE_TAG }} ./backend/product_service
          docker push  $ACR_LOGIN_SERVER/product_service:${{ env.IMAGE_TAG }}
          docker tag   $ACR_LOGIN_SERVER/product_service:${{ env.IMAGE_TAG }} $ACR_LOGIN_SERVER/product_service:latest
          docker push  $ACR_LOGIN_SERVER/product_service:latest
 
      - name: Build & push Order Service
        run: |
          docker build -t $ACR_LOGIN_SERVER/order_service:${{ env.IMAGE_TAG }} ./backend/order_service
          docker push  $ACR_LOGIN_SERVER/order_service:${{ env.IMAGE_TAG }}
          docker tag   $ACR_LOGIN_SERVER/order_service:${{ env.IMAGE_TAG }} $ACR_LOGIN_SERVER/order_service:latest
          docker push  $ACR_LOGIN_SERVER/order_service:latest
 
      - name: Logout Azure
        if: always()
        run: az logout || true
