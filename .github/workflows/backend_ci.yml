# week08/.github/workflows/backend_ci.yml

name: Backend CI - Test, Build and Push Images to ACR

on:
  workflow_dispatch:
  push:
    branches: [ main ]
    paths:
      - 'backend/**'
      - '.github/workflows/backend_ci.yml'

env:
  # unique, traceable tag per run
  IMAGE_TAG: ${{ github.sha }}-${{ github.run_id }}
  # repo names (change to hyphens if your k8s uses hyphens)
  PRODUCT_REPO: product_service
  ORDER_REPO:   order_service

jobs:
  test_and_lint_backends:
    runs-on: ubuntu-latest

    services:
      product_db:
        image: postgres:15
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: products
        options: >-
          --health-cmd "pg_isready -U postgres"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports: [ "5432:5432" ]

      order_db:
        image: postgres:15
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: orders
        options: >-
          --health-cmd "pg_isready -U postgres"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports: [ "5433:5432" ]

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python 3.10
        uses: actions/setup-python@v5
        with:
          python-version: '3.10'

      - name: Install dependencies
        run: |
          pip install --upgrade pip
          for req in backend/*/requirements.txt; do
            echo "Installing $req"
            pip install -r "$req"
          done
          pip install pytest httpx

      - name: Run product_service tests
        working-directory: backend/product_service
        env:
          POSTGRES_HOST: localhost
          POSTGRES_PORT: 5432
          POSTGRES_DB: products
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
        run: pytest tests --maxfail=1 --disable-warnings -q

      - name: Run order_service tests
        working-directory: backend/order_service
        env:
          POSTGRES_HOST: localhost
          POSTGRES_PORT: 5433
          POSTGRES_DB: orders
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
        run: pytest tests --maxfail=1 --disable-warnings -q

  build_and_push_images:
    runs-on: ubuntu-latest
    needs: test_and_lint_backends

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Azure Login
        uses: azure/login@v2
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}   # SP JSON from --sdk-auth

      # We keep ACR short name in a secret to avoid hard-coding
      - name: Validate ACR_NAME secret exists
        run: |
          test -n "${{ secrets.ACR_NAME }}" || (echo "Missing secret ACR_NAME"; exit 1)

      - name: Resolve ACR login server
        run: |
          echo "ACR_LOGIN_SERVER=$(az acr show -n ${{ secrets.ACR_NAME }} --query loginServer -o tsv)" >> $GITHUB_ENV
          echo "Resolved login server: $ACR_LOGIN_SERVER"

      - name: Login to ACR (by short name)
        run: az acr login --name ${{ secrets.ACR_NAME }}

      - name: Build & push Product Service
        run: |
          docker build -t $ACR_LOGIN_SERVER/${{ env.PRODUCT_REPO }}:${{ env.IMAGE_TAG }} ./backend/product_service
          docker push  $ACR_LOGIN_SERVER/${{ env.PRODUCT_REPO }}:${{ env.IMAGE_TAG }}
          docker tag   $ACR_LOGIN_SERVER/${{ env.PRODUCT_REPO }}:${{ env.IMAGE_TAG }} $ACR_LOGIN_SERVER/${{ env.PRODUCT_REPO }}:latest
          docker push  $ACR_LOGIN_SERVER/${{ env.PRODUCT_REPO }}:latest

      - name: Build & push Order Service
        run: |
          docker build -t $ACR_LOGIN_SERVER/${{ env.ORDER_REPO }}:${{ env.IMAGE_TAG }} ./backend/order_service
          docker push  $ACR_LOGIN_SERVER/${{ env.ORDER_REPO }}:${{ env.IMAGE_TAG }}
          docker tag   $ACR_LOGIN_SERVER/${{ env.ORDER_REPO }}:${{ env.IMAGE_TAG }} $ACR_LOGIN_SERVER/${{ env.ORDER_REPO }}:latest
          docker push  $ACR_LOGIN_SERVER/${{ env.ORDER_REPO }}:latest

      - name: Logout from Azure
        if: always()
        run: az logout || true
