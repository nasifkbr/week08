name: CD - Deploy Backend Services to AKS
 
on:
  workflow_dispatch:
    inputs:
      aks_cluster_name:
        description: Name of the AKS Cluster to deploy to
        required: true
        default: sit722week08aks
      aks_resource_group:
        description: Resource Group of the AKS Cluster
        required: true
        default: sit722week08
      aks_acr_name:
        description: Name of ACR (short name, not login server)
        required: true
        default: sit722week08acr
 
jobs:
  deploy_backend:
    runs-on: ubuntu-latest
    environment: Production
 
    outputs:
      PRODUCT_API_IP: ${{ steps.get_product_ip.outputs.external_ip }}
      ORDER_API_IP:   ${{ steps.get_order_ip.outputs.external_ip }}
 
    steps:
      - name: Checkout
        uses: actions/checkout@v4
 
      - name: Azure Login
        uses: azure/login@v2
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}
 
      - name: Get AKS credentials
        run: |
          az aks get-credentials \
            --resource-group "${{ github.event.inputs.aks_resource_group }}" \
            --name "${{ github.event.inputs.aks_cluster_name }}" \
            --overwrite-existing
 
      # Best-effort, skips if your SP lacks Owner/User Access Admin
      - name: Attach ACR (best-effort)
        run: |
          az aks update \
            --name "${{ github.event.inputs.aks_cluster_name }}" \
            --resource-group "${{ github.event.inputs.aks_resource_group }}" \
            --attach-acr "${{ github.event.inputs.aks_acr_name }}" || \
          echo "Skipping attach-acr (no permission or already attached)"
 
      - name: Deploy Infrastructure (ConfigMaps, Secrets, DBs)
        run: |
          cd k8s
          kubectl apply -f configmaps.yaml
          kubectl apply -f secrets.yaml
          kubectl apply -f product-db.yaml
          kubectl apply -f order-db.yaml
 
      - name: Deploy Backend Services (Product, Order)
        run: |
          cd k8s
          kubectl apply -f product-service.yaml
          kubectl apply -f order-service.yaml
 
      - name: Wait for LoadBalancer IPs (Product & Order)
        id: wait_lb
        run: |
          echo "Waiting up to 5 minutes for LB IPs..."
          for i in $(seq 1 60); do
            PRODUCT_IP=$(kubectl get svc product-service-w08e1 -o jsonpath='{.status.loadBalancer.ingress[0].ip}' 2>/dev/null || true)
            ORDER_IP=$(kubectl get svc order-service-w08e1   -o jsonpath='{.status.loadBalancer.ingress[0].ip}' 2>/dev/null || true)
            echo "Attempt $i/60 -> product=$PRODUCT_IP order=$ORDER_IP"
            if [[ -n "$PRODUCT_IP" && -n "$ORDER_IP" ]]; then
              echo "PRODUCT_IP=$PRODUCT_IP" >> $GITHUB_ENV
              echo "ORDER_IP=$ORDER_IP"     >> $GITHUB_ENV
              break
            fi
            sleep 5
          done
          if [[ -z "$PRODUCT_IP" || -z "$ORDER_IP" ]]; then
            echo "Services:"
            kubectl get svc
            echo "Pods:"
            kubectl get pods -o wide
            echo "ERROR: LB IPs not assigned in time."
            exit 1
          fi
 
      - name: Capture Product Service IP (output)
        id: get_product_ip
        run: echo "external_ip=${{ env.PRODUCT_IP }}" >> $GITHUB_OUTPUT
 
      - name: Capture Order Service IP (output)
        id: get_order_ip
        run: echo "external_ip=${{ env.ORDER_IP }}" >> $GITHUB_OUTPUT
 
      - name: Logout Azure
        if: always()
        run: az logout || true
